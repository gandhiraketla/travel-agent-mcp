from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from typing import List, Optional
import asyncio
import json
import sys
import os
import site
from typing import Dict, Optional, List

parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)
from agent.travel_planner_agent import generate_travel_plan

# Pydantic model for request validation
class TravelPlanRequest(BaseModel):
    origin: str
    destination: str
    start_date: str
    end_date: str
    travelers: int = Field(default=1, gt=0)
    budget: str = "Medium"
    interests: Optional[List[str]] = None

# Create FastAPI app
app = FastAPI(
    title="Travel Planner API",
    description="Generate comprehensive travel plans using AI-powered tools",
    version="1.0.0"
)

@app.post("/generate-travel-plan")
async def create_travel_plan(request: TravelPlanRequest):
    """
    Generate a comprehensive travel plan based on the provided parameters
    
    Parameters:
    - origin: Starting location
    - destination: Travel destination
    - start_date: Trip start date (YYYY-MM-DD)
    - end_date: Trip end date (YYYY-MM-DD)
    - travelers: Number of travelers
    - budget: Budget category
    - interests: Optional list of interests
    
    Returns:
    - Comprehensive travel plan JSON
    """
    try:
        # Call the generate_travel_plan function
        travel_plan = await generate_travel_plan(
            origin=request.origin,
            destination=request.destination,
            start_date=request.start_date,
            end_date=request.end_date,
            travelers=request.travelers,
            budget=request.budget,
            interests=request.interests
        )
        
        # Check for error in travel plan
        if 'error' in travel_plan:
            raise HTTPException(
                status_code=400, 
                detail=travel_plan.get('error', 'Unknown error occurred')
            )
        
        return travel_plan
    
    except Exception as e:
        # Catch any unexpected errors
        raise HTTPException(status_code=500, detail=str(e))

# Optional: Health check endpoint
@app.get("/health")
async def health_check():
    """
    Simple health check endpoint
    """
    return {"status": "healthy", "service": "Travel Planner API"}

# Optional: API documentation endpoints are automatically generated by FastAPI
# You can access:
# - Swagger UI: http://localhost:8000/docs
# - ReDoc: http://localhost:8000/redoc

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)